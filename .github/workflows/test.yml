name: DevSecOps

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  security-events: write

env:
  NODE_VERSION: 18
  APP_PORT: 3000
  DEP_CHECK_VERSION: 8.5.0
  APP_START_CMD: "npm start"   # Change if your app uses a different start command

jobs:
  # ----------------------------
  # SAST - CodeQL
  # ----------------------------
  sast:
    name: SAST - CodeQL
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Run CodeQL analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "sast"

      - name: Upload CodeQL Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: codeql-results
          path: codeql-db

  # ----------------------------
  # SCA - OWASP Dependency-Check CLI
  # ----------------------------
  sca:
    name: SCA - OWASP Dependency-Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm install

      - name: Download OWASP Dependency-Check CLI
        run: |
          curl -L -o dependency-check.zip https://github.com/jeremylong/DependencyCheck/releases/download/v${{ env.DEP_CHECK_VERSION }}/dependency-check-${{ env.DEP_CHECK_VERSION }}-release.zip
          unzip dependency-check.zip

      - name: Run Dependency-Check
        run: |
          mkdir -p dependency-check-reports
          ./dependency-check/bin/dependency-check.sh \
            --project "$(basename $GITHUB_REPOSITORY)" \
            --scan ./ \
            --format ALL \
            --out ./dependency-check-reports \
            --failOnCVSS 7 || true

      - name: Upload Dependency-Check Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-reports
          path: dependency-check-reports

  # ----------------------------
  # DAST - OWASP ZAP
  # ----------------------------
  dast:
    name: DAST - OWASP ZAP
    runs-on: ubuntu-latest
    needs: sca
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm install

      - name: Start App in Background
        run: |
          nohup ${{ env.APP_START_CMD }} &
          for i in {1..30}; do
            if curl -sSf http://localhost:${{ env.APP_PORT }}/ >/dev/null 2>&1; then
              echo "App is up"
              break
            fi
            echo "Waiting for app... ($i)"
            sleep 2
          done

      - name: Run ZAP Baseline Scan
        run: |
          docker pull owasp/zap2docker-stable
          docker run --rm --network host -v $(pwd):/zap/wrk/:rw owasp/zap2docker-stable \
            zap-baseline.py -t http://localhost:${{ env.APP_PORT }} -r zap_report.html -I

      - name: Upload ZAP report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap_report.html

      - name: Fail if ZAP found High/Critical
        run: |
          if grep -q -E "Risk: High|Risk: Critical" zap_report.html; then
            echo "High/Critical issues found by ZAP -> failing job"
            exit 1
          else
            echo "No High/Critical issues found by ZAP"

  # ----------------------------
  # PR Comment
  # ----------------------------
  pr-comment:
    name: PR Security Summary
    runs-on: ubuntu-latest
    needs: [sast, sca, dast]
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Download Dependency-Check Reports
        uses: actions/download-artifact@v4
        with:
          name: dependency-check-reports

      - name: Download ZAP report
        uses: actions/download-artifact@v4
        with:
          name: zap-report

      - name: Create summary comment
        run: |
          SUMMARY="### ðŸ”’ Security Scan Summary\n\n"
          if [ -d dependency-check-reports ] && [ "$(ls -A dependency-check-reports)" ]; then
            SUMMARY="$SUMMARY- **SCA**: dependency-check report attached.\n"
          else
            SUMMARY="$SUMMARY- **SCA**: no report.\n"
          fi
          if [ -f zap_report.html ]; then
            HIGHS=$(grep -c "Risk: High" zap_report.html || true)
            CRITS=$(grep -c "Risk: Critical" zap_report.html || true)
            SUMMARY="$SUMMARY- **DAST**: ZAP report attached. High: $HIGHS, Critical: $CRITS\n"
          else
            SUMMARY="$SUMMARY- **DAST**: no report.\n"
          fi
          echo -e "$SUMMARY" > comment.md

      - name: Post or update PR comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: "### ðŸ”’ Security Scan Summary"
          path: comment.md
